* {
    box-sizing: border-box
}

body {
    margin: 0px;
    font-family: sans-serif;
}

#layout {
    max-width: 800px;
    margin: 48px auto;
    text-align: center;
}

.basic-grid-gallery {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 24px; /* new */

    padding: 24px;
    border: 10px solid #333333;
}

.basic-grid-gallery img {
    width: 100%;
}

.cropped-grid-gallery {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;

    grid-auto-rows: 200px; 

    padding: 24px;
    border: 10px solid #333333;
}

.cropped-grid-gallery img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.horizontal-masonry-gallery {
    display: flex;
    flex-wrap: wrap;
    gap: 24px;
}

.horizontal-masonry-gallery img {
    height: 250px;
    flex: 1;
    object-fit: cover;
}

/*
    Now we'll see how to build a vertical
    masonry gallery.  There is a way to
    do it with Flexbox, but it's a rather
    fragile design, meaning it's easy to
    break if you add or remove images.

    That example is in the Layouts section
    of the Coding Cookbook, if you want to
    see how it's done, but we're going to
    show you a better (and simpler!) way
    to build a vertical masonry gallery,
    using a somewhat archaic CSS Property.

    First, we need to create another gallery
    in our HTML, this time with the class
    of "vertical-masonry-gallery".

    (Go into the HTML and do that)

    Now we're going to target the gallery,
    and use a property called "columns".

    This property accepts two values: 
    - the number of columns to define
    - the width of those columns

    Let's build a three column gallery,
    with the widths of those columns
    able to adjust AUTOmatically to
    fill the available space.

    (This is similar to the flex property
    in flexboxes, or the fractional units
    (fr) in grids)
*/

.vertical-masonry-gallery {
    columns: 3 auto;
}

/*
    However, as before, we still need to
    configure the images to get them to
    behave in the gallery.

    This is the same as most of our 
    previous examples.
*/
.vertical-masonry-gallery img {
    width: 100%;
}

/*
    Not bad for only using two CSS properties!

    The columns property has been around for a 
    very long time, and originally was 
    used to build text columns similar 
    to a newspaper layout.

    As we've discussed before though,
    newspaper columns are not a very 
    good design for textual content online;
    they tend to be frustrating to read
    if you have to keep scrolling up and
    down the page to read them.

    However...images are a different matter:
    images don't need to be viewed sequentially
    in order to understand them, even in columns.

    So the columns of images in our gallery
    actually work really well as a design,
    and the best part of using the columns
    property for our gallery is that it will
    automatically re-adjust as necessary 
    when we add or subtract images from the 
    gallery.
*/