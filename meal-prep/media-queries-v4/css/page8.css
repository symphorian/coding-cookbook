* {
    box-sizing: border-box;
}

body {
    margin: 0px;
    font-family: sans-serif;
}

#nav {
    background-color: #222222;
    display: flex;
    justify-content: center;
    /* flex-wrap: wrap; */
    /* flex-direction: column; */
}

#nav a {
    color: white;
    font-size: 18px;
    text-decoration: none;
    padding: 20px;
}

.single-column-layout {
    width: 90vw;
    max-width: 800px;
    margin: 48px auto;
}

.intro {
    display: flex;
    align-items: center;
    gap: 48px;
}

.image-container,
.content-container {
    flex: 1;
}

.image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 24px;
}

.image-container {
    height: 400px;
}

.content-container h1 {
    font-size: 48px;
    color: #ffb700;
}

.featured {
    background-color: #222222;
    color: white;
    padding: 24px 0px;
}

.featured h2 {
    font-size: 36px;
    text-align: center;
}

.grid img {
    width: 100%;
    height: 300px;
    object-fit: cover;
    border-radius: 24px;
}

/*
    Next, we're going to set up a grid with four
    equally sized columns. Remember how to do that?
*/
.grid {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;

    /*
        Let's also add the 'gap' property,
        to add some spacing between grid cells.
    */
    gap: 16px;
    
    /* 
        That's much cleaner already, but we have
        some empty space that we want to take
        advantage of in the last two cells of the
        grid.

        Also, having the text cells right next
        to each other isn't a very interesting
        design (and we can probably add some 
        additional styles so the text isn't 
        floating in a vacuum).

        To redesign our grid beyond the default,
        we're going to use grid-template-areas
        to spread some of the images across
        multiple cells, and also reorder the
        text and images.
    */
    grid-template-areas:
        "txt1 img1 img2 img2"
        "img3 img3 img4 txt2";
}

/*
    That takes care of the grid setup...but
    nothing changed. Remember why?

    We need to actually connect our grid
    elements into those grid areas by using
    the grid-area property on the grid items.

    So we'll go ahead and do that next.
*/
#p1 {
    grid-area: txt1;
}

#p2 {
    grid-area: txt2;
}

#img1 {
    grid-area: img1;
}

#img2 {
    grid-area: img2;
}

#img3 {
    grid-area: img3;
}

#img4 {
    grid-area: img4;
}

/*
    And lastly, we'll restyle those paragraphs
    to make them more interesting, giving them
    a border with that same color accent from
    before.
*/
.grid p {
    border: 2px solid #ffb700;
    border-radius: 24px;
    margin: 0px;
    padding: 20px;
}

/*
    How about that? That's a more interesting
    design than what we started with, right?

    But look at what happens when you start
    shrinking the preview...things start
    getting pretty squished!

    So next, we're going to restyle the grid 
    inside of our media queries so that it
    looks good at any screen width.
*/

/* TABLET BREAKPOINT */
@media screen and (max-width: 740px) and (min-width: 450px) {
    body {
        background-color: skyblue;
    }

    .content-container h1 {
        font-size: 28px;
    }

    .intro {
        gap: 24px;
    }

    .image-container {
        height: 300px;
    }
}

/* MOBILE BREAKPOINT */
@media screen and (max-width: 450px) {
    body {
        background-color: firebrick;
    }

    #nav {
        flex-direction: column;
        align-items: center;
    }

    .intro {
        flex-direction: column;
        gap: 24px;
    }

    .content-container h1 {
        margin: 0px;
        font-size: 28px;
    }

    .content-container {
        text-align: center;
    }
}

