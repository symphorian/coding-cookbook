* {
    box-sizing: border-box
}

body {
    margin: 0px;
    font-family: sans-serif;
}

/*
    Now let's actually put some content into our
    hero.  Go into the HTML and add a single H1,
    then come back here.

    There are just as many ways to arrange content
    inside of a hero as there are to arrange
    content on a page; a hero is ultimately just
    another HTML container, that's all.

    Oftentimes, we'll want our content to be
    vertically centered inside of the hero,
    and aligned to the left, center, or right.

    Flexbox makes all that a snap, so let's try
    that out for this hero.

    Do you remember how to activate Flexbox,
    and which Flexbox properties we can used to
    align content horizontally and vertically?
*/
#hero-1 {
    background-image: url("../images/lizard.jpg");
    height: 100vh;
    background-size: cover;
    background-position: center center;

    /* new properties */
    display: flex;
    justify-content: flex-start; /* i.e. left alignment for rows */
    align-items: center;
}

/*
    That worked, but we'll want to change up our
    H1 styles a bit to make it more impactful
    and better spaced.

    Let's make it bigger, and give it some padding.
*/

#hero-1 h1 {
    font-size: 15vw; /* 15% of the view width */
    padding-left: 10vw; /* 10% of the view width */
}

/*
    We could have used an absolute font-size or
    padding values, but as we'll see, that can
    become a little problematic.

    First of, anytime you find yourself providing
    margin/padding values over 100px, there's a
    good chance there's a better way of doing
    what you're trying to do; most likely,
    you're not adding "bubble-wrap" or "personal
    space", you're actually trying to position
    something, and there are different tools 
    for that (which we'll learn today).

    Second, even if we did pick a value like 250px,
    (try it out with padding-left temporarily)
    watch what happens when shrink the screen...

    The text doesn't adapt to the shrinking screen,
    and eventually starts to overlap with the focus
    of the image (our lizard friend).

    Using a relative width value for both font-size
    and padding allows our hero content to adapt
    better to the screen size.

    (change padding-left back to 10vw now)

    Again, there is no perfect code that will work
    for all circumstances: eventually the design
    will break when the screen gets too large or
    too small.

    But (for what we know how to do now), this
    is a pretty decent responsive design for this
    hero.
*/