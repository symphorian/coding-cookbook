* {
    box-sizing: border-box
}

body {
    margin: 0px;
    font-family: sans-serif;
}

/*
    Before we move on and create a new hero,
    let's add some spacing below our first hero,
    so we don't have our heroes right up against
    each other.

    Normally, we don't have multiple heroes on the 
    same page anyway, but it is still a good idea
    to add spacing below a hero, because we don't
    want our page content to be smashed up against 
    it either.
*/

#hero-1 {
    background-image: url("../images/lizard.jpg");
    height: 100vh;
    background-size: cover;
    background-position: center center;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    margin-bottom: 100px; /* new */
}

#hero-1 h1 {
    font-size: 120px; 
    padding-left: 100px;
}

/*
    Now let's move on to our second hero example.

    Hop over to the HTML again, and come back here
    when you're done.
*/

/*
    Now we'll start styling another hero, 
    starting with the background properties.

    We'll use an image with the focus on the
    other side this time.

    Coincidentally, the same properties work
    pretty well.
*/
#hero-2 {
    background-image: url("../images/lonely-ocean.jpg");
    height: 100vh;
    background-size: cover;
    background-position: center center;

    /*
        But what happens if we try to apply the 
        same flexbox properties (but aligned to
        the right)?
    */
    display: flex;
    justify-content: flex-end; /* i.e. alignment right for rows */
    align-items: center;
}

/*
    ...not so great. We still have yet to style
    our text content, but already there's a
    problem: all of our content is lined up 
    in a row.

    Which is not all that surprising, because
    that's exactly what flexboxes do (by default).
*/