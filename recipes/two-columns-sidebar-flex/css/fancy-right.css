/* COMMON PAGE LAYOUT SETUP CSS - START *****************/
* {
    box-sizing: border-box;
}

body {
    margin: 0px;
    /* preferred copy font goes here */
    font-family: sans-serif; 
}
/* COMMON PAGE LAYOUT SETUP CSS - END ********************/

/*
    It's actually rather rare to find a page 
    layout composed purely of a sidebar and content
    area; usually, a sidebar layout is contained
    inside of a single column layout.

    So let's see how we might build something like
    that using flex...
    
    ...and why not make it a little fancier,
    by making the sidebar scroll with the page too!
*/

#two-columns {
    display: flex;
    /*
        Here, we add code to transform our container
        into a single column layout, centered in the
        middle of the page, with our two column 
        layout INSIDE of it.

        We also add some max- and min- widths so that
        our center column doesn't get too big or 
        too small, since we're using relative units.
    */
    width: 80%;
    min-width: 600px;
    max-width: 1000px;
    margin: 48px auto;
}

/*
    The rest of this is (mostly) adding additional
    padding and margin (well, technically removing
    in margin's case), along with modifying borders
    and background-colors.
*/

#sidebar-content {
    width: 250px;
    order: 2;
    margin-top: 24px;
    padding: 0px 12px;
}

#sidebar-content h2 {
    background-color: #232372;
    color: white;
    padding: 8px 16px;
    margin: 0px;
}

#sidebar-content ul {
    border: 1px solid #DDDDDD;
    margin: 0px;
    padding: 16px;
    list-style-type: none;
}

#sidebar-content ul li {
    padding: 8px 0px;
}

/* 
    remember that in order to change the style
    of a hyperlink (anchor), you need to target
    it very specifically in order to overwrite
    the default browser styles, which usually 
    means your selectors need to end in 'a'
*/
#sidebar-content ul a {
    color: #232372;
    text-decoration: none;
}

#main-content {
    flex: 1;
    order: 1;
    margin-right: 16px;
}

/*
    This is the neat little trick that works great
    for sidebars that are short, but we want to be
    visible even as the user scrolls down.

    By adding position: sticky; to the container 
    inside of #sidebar-content, we can tell it to 
    "stick" to the top of the screen when scrolling.

    This won't work on #sidebar-content, because it
    is a flex item (or flex child), which is why we
    added a new container inside.
    
    The 'top' property tells the element how far
    down from the top of the screen the element 
    should stick.

    Cool, right?
*/
#sticky-sidebar {
    position: sticky;
    top: 24px;
}